import { UsePopperProps } from "@chakra-ui/popper";
import * as React from "react";
export interface UseMenuProps extends UsePopperProps {
    /**
     * The parent menu's context
     */
    context?: UseMenuReturn;
    /**
     * Unique id to be used by menu and it's children
     */
    id?: string;
    /**
     * If `true`, the menu will close when a menu item is
     * clicked
     *
     * @default true
     */
    closeOnSelect?: boolean;
    /**
     * If `true`, the menu will close when you click outside
     * the menu list
     */
    closeOnBlur?: boolean;
    /**
     * If `true`, the first enabled menu item will be selected
     * when the menu opens.
     *
     * @default true
     */
    autoSelect?: boolean;
}
/**
 * React Hook to manage a menu
 *
 * It provides the logic and will be used with react context
 * to propagate it's return value to all children
 */
export declare function useMenu(props: UseMenuProps): {
    domContext: {
        descendants: {
            element: HTMLDivElement | null;
            index?: number | undefined;
            disabled?: boolean | undefined;
            focusable?: boolean | undefined;
        }[];
        register: ({ element, ...rest }: {
            element: HTMLDivElement | null;
            index?: number | undefined;
            disabled?: boolean | undefined;
            focusable?: boolean | undefined;
        }) => void;
        unregister: (element: HTMLDivElement) => void;
    };
    popper: {
        ref: React.RefObject<HTMLDivElement>;
        style: React.CSSProperties;
    };
    placement: import("@popperjs/core/lib/enums").Placement;
    reference: {
        ref: React.RefObject<HTMLButtonElement>;
    };
    buttonId: string;
    menuId: string;
    parentMenu: UseMenuReturn | undefined;
    hasParentMenu: boolean;
    orientation: string;
    isOpen: boolean;
    onToggle: () => void;
    onOpen: () => void;
    onClose: () => void;
    menuRef: React.RefObject<HTMLDivElement>;
    buttonRef: React.RefObject<HTMLButtonElement>;
    focusedIndex: number;
    closeOnSelect: boolean;
    closeOnBlur: boolean;
    autoSelect: boolean;
    setFocusedIndex: React.Dispatch<React.SetStateAction<number>>;
};
export interface UseMenuReturn extends ReturnType<typeof useMenu> {
}
/**
 * React Hook to manage a menu list.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and it's return value
 * is passed as `context` to this hook.
 */
export interface UseMenuListProps {
    onMouseEnter?: React.MouseEventHandler;
    onBlur?: React.FocusEventHandler;
    onKeyDown?: React.KeyboardEventHandler;
    /**
     * Return value from `useMenu` hook
     */
    context: UseMenuReturn;
    style?: React.CSSProperties;
    className?: string;
    hidden?: boolean;
}
export declare function useMenuList(props: UseMenuListProps): {
    className: string;
    ref: (value: HTMLDivElement) => void;
    tabIndex: number;
    role: string;
    id: string;
    hidden: boolean;
    "aria-orientation": "vertical" | "horizontal" | undefined;
    "data-placement": import("@popperjs/core/lib/enums").Placement;
    style: {
        alignContent?: string | undefined;
        alignItems?: string | undefined;
        alignSelf?: string | undefined;
        animationDelay?: string | undefined;
        animationDirection?: string | undefined;
        animationDuration?: string | undefined;
        animationFillMode?: string | undefined;
        animationIterationCount?: string | number | undefined;
        animationName?: string | undefined;
        animationPlayState?: string | undefined;
        animationTimingFunction?: string | undefined;
        appearance?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "button-bevel" | "checkbox" | "listbox" | "menulist" | "menulist-button" | "meter" | "progress-bar" | "push-button" | "radio" | "searchfield" | "slider-horizontal" | "square-button" | "textarea" | "button" | "textfield" | undefined;
        aspectRatio?: string | undefined;
        backdropFilter?: string | undefined;
        backfaceVisibility?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | undefined;
        backgroundAttachment?: string | undefined;
        backgroundBlendMode?: string | undefined;
        backgroundClip?: string | undefined;
        backgroundColor?: string | undefined;
        backgroundImage?: string | undefined;
        backgroundOrigin?: string | undefined;
        backgroundPosition?: string | number | undefined;
        backgroundPositionX?: string | number | undefined;
        backgroundPositionY?: string | number | undefined;
        backgroundRepeat?: string | undefined;
        backgroundSize?: string | number | undefined;
        blockOverflow?: string | undefined;
        blockSize?: string | number | undefined;
        borderBlockColor?: string | undefined;
        borderBlockEndColor?: string | undefined;
        borderBlockEndStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderBlockEndWidth?: string | number | undefined;
        borderBlockStartColor?: string | undefined;
        borderBlockStartStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderBlockStartWidth?: string | number | undefined;
        borderBlockStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderBlockWidth?: string | number | undefined;
        borderBottomColor?: string | undefined;
        borderBottomLeftRadius?: string | number | undefined;
        borderBottomRightRadius?: string | number | undefined;
        borderBottomStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderBottomWidth?: string | number | undefined;
        borderCollapse?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "collapse" | "separate" | undefined;
        borderEndEndRadius?: string | number | undefined;
        borderEndStartRadius?: string | number | undefined;
        borderImageOutset?: string | number | undefined;
        borderImageRepeat?: string | undefined;
        borderImageSlice?: string | number | undefined;
        borderImageSource?: string | undefined;
        borderImageWidth?: string | number | undefined;
        borderInlineColor?: string | undefined;
        borderInlineEndColor?: string | undefined;
        borderInlineEndStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderInlineEndWidth?: string | number | undefined;
        borderInlineStartColor?: string | undefined;
        borderInlineStartStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderInlineStartWidth?: string | number | undefined;
        borderInlineStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderInlineWidth?: string | number | undefined;
        borderLeftColor?: string | undefined;
        borderLeftStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderLeftWidth?: string | number | undefined;
        borderRightColor?: string | undefined;
        borderRightStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderRightWidth?: string | number | undefined;
        borderSpacing?: string | number | undefined;
        borderStartEndRadius?: string | number | undefined;
        borderStartStartRadius?: string | number | undefined;
        borderTopColor?: string | undefined;
        borderTopLeftRadius?: string | number | undefined;
        borderTopRightRadius?: string | number | undefined;
        borderTopStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        borderTopWidth?: string | number | undefined;
        bottom?: string | number | undefined;
        boxDecorationBreak?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "clone" | "slice" | undefined;
        boxShadow?: string | undefined;
        boxSizing?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "border-box" | "content-box" | undefined;
        breakAfter?: "auto" | "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "all" | "always" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "page" | "recto" | "region" | "verso" | undefined;
        breakBefore?: "auto" | "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "all" | "always" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | "column" | "page" | "recto" | "region" | "verso" | undefined;
        breakInside?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "avoid" | "avoid-column" | "avoid-page" | "avoid-region" | undefined;
        captionSide?: "top" | "bottom" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "block-end" | "block-start" | "inline-end" | "inline-start" | undefined;
        caretColor?: string | undefined;
        clear?: "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "both" | "none" | "inline-end" | "inline-start" | undefined;
        clipPath?: string | undefined;
        color?: string | undefined;
        colorAdjust?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "economy" | "exact" | undefined;
        columnCount?: number | "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        columnFill?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "balance" | "balance-all" | undefined;
        columnGap?: string | number | undefined;
        columnRuleColor?: string | undefined;
        columnRuleStyle?: string | undefined;
        columnRuleWidth?: string | number | undefined;
        columnSpan?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "all" | undefined;
        columnWidth?: string | number | undefined;
        contain?: string | undefined;
        content?: string | undefined;
        counterIncrement?: string | undefined;
        counterReset?: string | undefined;
        counterSet?: string | undefined;
        cursor?: string | undefined;
        direction?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "ltr" | "rtl" | undefined;
        display?: string | undefined;
        emptyCells?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "hide" | "show" | undefined;
        filter?: string | undefined;
        flexBasis?: string | number | undefined;
        flexDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "column" | "column-reverse" | "row" | "row-reverse" | undefined;
        flexGrow?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        flexShrink?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        flexWrap?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | undefined;
        float?: "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "inline-end" | "inline-start" | undefined;
        fontFamily?: string | undefined;
        fontFeatureSettings?: string | undefined;
        fontKerning?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "none" | undefined;
        fontLanguageOverride?: string | undefined;
        fontOpticalSizing?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        fontSize?: string | number | undefined;
        fontSizeAdjust?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        fontStretch?: string | undefined;
        fontStyle?: string | undefined;
        fontSynthesis?: string | undefined;
        fontVariant?: string | undefined;
        fontVariantCaps?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "all-petite-caps" | "all-small-caps" | "petite-caps" | "small-caps" | "titling-caps" | "unicase" | undefined;
        fontVariantEastAsian?: string | undefined;
        fontVariantLigatures?: string | undefined;
        fontVariantNumeric?: string | undefined;
        fontVariantPosition?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "sub" | "super" | undefined;
        fontVariationSettings?: string | undefined;
        fontWeight?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "bold" | "bolder" | "lighter" | undefined;
        gridAutoColumns?: string | number | undefined;
        gridAutoFlow?: string | undefined;
        gridAutoRows?: string | number | undefined;
        gridColumnEnd?: string | number | undefined;
        gridColumnStart?: string | number | undefined;
        gridRowEnd?: string | number | undefined;
        gridRowStart?: string | number | undefined;
        gridTemplateAreas?: string | undefined;
        gridTemplateColumns?: string | number | undefined;
        gridTemplateRows?: string | number | undefined;
        hangingPunctuation?: string | undefined;
        height?: string | number | undefined;
        hyphens?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "manual" | undefined;
        imageOrientation?: string | undefined;
        imageRendering?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "-moz-crisp-edges" | "-webkit-optimize-contrast" | "crisp-edges" | "pixelated" | undefined;
        imageResolution?: string | undefined;
        initialLetter?: string | number | undefined;
        inlineSize?: string | number | undefined;
        inset?: string | number | undefined;
        insetBlock?: string | number | undefined;
        insetBlockEnd?: string | number | undefined;
        insetBlockStart?: string | number | undefined;
        insetInline?: string | number | undefined;
        insetInlineEnd?: string | number | undefined;
        insetInlineStart?: string | number | undefined;
        isolation?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "isolate" | undefined;
        justifyContent?: string | undefined;
        justifyItems?: string | undefined;
        justifySelf?: string | undefined;
        left?: string | number | undefined;
        letterSpacing?: string | number | undefined;
        lineBreak?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
        lineHeight?: string | number | undefined;
        lineHeightStep?: string | number | undefined;
        listStyleImage?: string | undefined;
        listStylePosition?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "inside" | "outside" | undefined;
        listStyleType?: string | undefined;
        marginBlock?: string | number | undefined;
        marginBlockEnd?: string | number | undefined;
        marginBlockStart?: string | number | undefined;
        marginBottom?: string | number | undefined;
        marginInline?: string | number | undefined;
        marginInlineEnd?: string | number | undefined;
        marginInlineStart?: string | number | undefined;
        marginLeft?: string | number | undefined;
        marginRight?: string | number | undefined;
        marginTop?: string | number | undefined;
        maskBorderMode?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "alpha" | "luminance" | undefined;
        maskBorderOutset?: string | number | undefined;
        maskBorderRepeat?: string | undefined;
        maskBorderSlice?: string | number | undefined;
        maskBorderSource?: string | undefined;
        maskBorderWidth?: string | number | undefined;
        maskClip?: string | undefined;
        maskComposite?: string | undefined;
        maskImage?: string | undefined;
        maskMode?: string | undefined;
        maskOrigin?: string | undefined;
        maskPosition?: string | number | undefined;
        maskRepeat?: string | undefined;
        maskSize?: string | number | undefined;
        maskType?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "alpha" | "luminance" | undefined;
        maxBlockSize?: string | number | undefined;
        maxHeight?: string | number | undefined;
        maxInlineSize?: string | number | undefined;
        maxLines?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        maxWidth?: string | number | undefined;
        minBlockSize?: string | number | undefined;
        minHeight?: string | number | undefined;
        minInlineSize?: string | number | undefined;
        minWidth?: string | number | undefined;
        mixBlendMode?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "color" | "color-burn" | "color-dodge" | "darken" | "difference" | "exclusion" | "hard-light" | "hue" | "lighten" | "luminosity" | "multiply" | "overlay" | "saturation" | "screen" | "soft-light" | undefined;
        motionDistance?: string | number | undefined;
        motionPath?: string | undefined;
        motionRotation?: string | undefined;
        objectFit?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | "cover" | "fill" | "scale-down" | undefined;
        objectPosition?: string | number | undefined;
        offsetAnchor?: string | number | undefined;
        offsetDistance?: string | number | undefined;
        offsetPath?: string | undefined;
        offsetRotate?: string | undefined;
        offsetRotation?: string | undefined;
        opacity?: string | number | undefined;
        order?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        orphans?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        outlineColor?: string | undefined;
        outlineOffset?: string | number | undefined;
        outlineStyle?: string | undefined;
        outlineWidth?: string | number | undefined;
        overflow?: string | undefined;
        overflowAnchor?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        overflowBlock?: "auto" | "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "scroll" | "clip" | undefined;
        overflowClipBox?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "content-box" | "padding-box" | undefined;
        overflowInline?: "auto" | "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "scroll" | "clip" | undefined;
        overflowWrap?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "anywhere" | "break-word" | undefined;
        overflowX?: "auto" | "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
        overflowY?: "auto" | "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
        overscrollBehavior?: string | undefined;
        overscrollBehaviorBlock?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | undefined;
        overscrollBehaviorInline?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | undefined;
        overscrollBehaviorX?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | undefined;
        overscrollBehaviorY?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | undefined;
        paddingBlock?: string | number | undefined;
        paddingBlockEnd?: string | number | undefined;
        paddingBlockStart?: string | number | undefined;
        paddingBottom?: string | number | undefined;
        paddingInline?: string | number | undefined;
        paddingInlineEnd?: string | number | undefined;
        paddingInlineStart?: string | number | undefined;
        paddingLeft?: string | number | undefined;
        paddingRight?: string | number | undefined;
        paddingTop?: string | number | undefined;
        pageBreakAfter?: "auto" | "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "always" | "avoid" | "recto" | "verso" | undefined;
        pageBreakBefore?: "auto" | "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "always" | "avoid" | "recto" | "verso" | undefined;
        pageBreakInside?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "avoid" | undefined;
        paintOrder?: string | undefined;
        perspective?: string | number | undefined;
        perspectiveOrigin?: string | number | undefined;
        placeContent?: string | undefined;
        pointerEvents?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "visible" | "all" | "fill" | "stroke" | "painted" | "visibleFill" | "visiblePainted" | "visibleStroke" | undefined;
        position?: "fixed" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "-webkit-sticky" | "absolute" | "relative" | "static" | "sticky" | undefined;
        quotes?: string | undefined;
        resize?: "vertical" | "horizontal" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "both" | "none" | "block" | "inline" | undefined;
        right?: string | number | undefined;
        rotate?: string | undefined;
        rowGap?: string | number | undefined;
        rubyAlign?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "space-around" | "space-between" | "center" | "start" | undefined;
        rubyMerge?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "collapse" | "separate" | undefined;
        rubyPosition?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "over" | "under" | undefined;
        scale?: string | number | undefined;
        scrollBehavior?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "smooth" | undefined;
        scrollMargin?: string | number | undefined;
        scrollMarginBlock?: string | number | undefined;
        scrollMarginBlockEnd?: string | number | undefined;
        scrollMarginBlockStart?: string | number | undefined;
        scrollMarginBottom?: string | number | undefined;
        scrollMarginInline?: string | number | undefined;
        scrollMarginInlineEnd?: string | number | undefined;
        scrollMarginInlineStart?: string | number | undefined;
        scrollMarginLeft?: string | number | undefined;
        scrollMarginRight?: string | number | undefined;
        scrollMarginTop?: string | number | undefined;
        scrollPadding?: string | number | undefined;
        scrollPaddingBlock?: string | number | undefined;
        scrollPaddingBlockEnd?: string | number | undefined;
        scrollPaddingBlockStart?: string | number | undefined;
        scrollPaddingBottom?: string | number | undefined;
        scrollPaddingInline?: string | number | undefined;
        scrollPaddingInlineEnd?: string | number | undefined;
        scrollPaddingInlineStart?: string | number | undefined;
        scrollPaddingLeft?: string | number | undefined;
        scrollPaddingRight?: string | number | undefined;
        scrollPaddingTop?: string | number | undefined;
        scrollSnapAlign?: string | undefined;
        scrollSnapStop?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "always" | undefined;
        scrollSnapType?: string | undefined;
        scrollbarColor?: string | undefined;
        scrollbarWidth?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "thin" | undefined;
        shapeImageThreshold?: string | number | undefined;
        shapeMargin?: string | number | undefined;
        shapeOutside?: string | undefined;
        tabSize?: string | number | undefined;
        tableLayout?: "auto" | "fixed" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        textAlign?: "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | "match-parent" | undefined;
        textAlignLast?: "auto" | "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | undefined;
        textCombineUpright?: string | undefined;
        textDecorationColor?: string | undefined;
        textDecorationLine?: string | undefined;
        textDecorationSkip?: string | undefined;
        textDecorationSkipInk?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        textDecorationStyle?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "solid" | "wavy" | undefined;
        textDecorationThickness?: string | number | undefined;
        textDecorationWidth?: string | number | undefined;
        textEmphasisColor?: string | undefined;
        textEmphasisPosition?: string | undefined;
        textEmphasisStyle?: string | undefined;
        textIndent?: string | number | undefined;
        textJustify?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "inter-character" | "inter-word" | undefined;
        textOrientation?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "mixed" | "sideways" | "upright" | undefined;
        textOverflow?: string | undefined;
        textRendering?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "geometricPrecision" | "optimizeLegibility" | "optimizeSpeed" | undefined;
        textShadow?: string | undefined;
        textSizeAdjust?: string | undefined;
        textTransform?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "full-width" | "capitalize" | "full-size-kana" | "lowercase" | "uppercase" | undefined;
        textUnderlineOffset?: string | number | undefined;
        textUnderlinePosition?: string | undefined;
        top?: string | number | undefined;
        touchAction?: string | undefined;
        transform?: string | undefined;
        transformBox?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "border-box" | "fill-box" | "view-box" | undefined;
        transformOrigin?: string | number | undefined;
        transformStyle?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "flat" | "preserve-3d" | undefined;
        transitionDelay?: string | undefined;
        transitionDuration?: string | undefined;
        transitionProperty?: string | undefined;
        transitionTimingFunction?: string | undefined;
        translate?: string | number | undefined;
        unicodeBidi?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "isolate" | "-moz-isolate" | "-moz-isolate-override" | "-moz-plaintext" | "-webkit-isolate" | "bidi-override" | "embed" | "isolate-override" | "plaintext" | undefined;
        userSelect?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | "all" | "text" | "-moz-none" | "element" | undefined;
        verticalAlign?: string | number | undefined;
        visibility?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "collapse" | undefined;
        whiteSpace?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "nowrap" | "-moz-pre-wrap" | "break-spaces" | "pre" | "pre-line" | "pre-wrap" | undefined;
        widows?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        width?: string | number | undefined;
        willChange?: string | undefined;
        wordBreak?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "break-word" | "break-all" | "keep-all" | undefined;
        wordSpacing?: string | number | undefined;
        wordWrap?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "break-word" | undefined;
        writingMode?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl" | undefined;
        zIndex?: number | "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        zoom?: string | number | undefined;
        all?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        animation?: string | number | undefined;
        background?: string | number | undefined;
        border?: string | number | undefined;
        borderBlock?: string | number | undefined;
        borderBlockEnd?: string | number | undefined;
        borderBlockStart?: string | number | undefined;
        borderBottom?: string | number | undefined;
        borderColor?: string | undefined;
        borderImage?: string | number | undefined;
        borderInline?: string | number | undefined;
        borderInlineEnd?: string | number | undefined;
        borderInlineStart?: string | number | undefined;
        borderLeft?: string | number | undefined;
        borderRadius?: string | number | undefined;
        borderRight?: string | number | undefined;
        borderStyle?: string | undefined;
        borderTop?: string | number | undefined;
        borderWidth?: string | number | undefined;
        columnRule?: string | number | undefined;
        columns?: string | number | undefined;
        flex?: string | number | undefined;
        flexFlow?: string | undefined;
        font?: string | undefined;
        gap?: string | number | undefined;
        grid?: string | undefined;
        gridArea?: string | number | undefined;
        gridColumn?: string | number | undefined;
        gridRow?: string | number | undefined;
        gridTemplate?: string | undefined;
        lineClamp?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        listStyle?: string | undefined;
        margin?: string | number | undefined;
        mask?: string | number | undefined;
        maskBorder?: string | number | undefined;
        motion?: string | number | undefined;
        offset?: string | number | undefined;
        outline?: string | number | undefined;
        padding?: string | number | undefined;
        placeItems?: string | undefined;
        placeSelf?: string | undefined;
        textDecoration?: string | number | undefined;
        textEmphasis?: string | undefined;
        transition?: string | undefined;
        MozAnimationDelay?: string | undefined;
        MozAnimationDirection?: string | undefined;
        MozAnimationDuration?: string | undefined;
        MozAnimationFillMode?: string | undefined;
        MozAnimationIterationCount?: string | number | undefined;
        MozAnimationName?: string | undefined;
        MozAnimationPlayState?: string | undefined;
        MozAnimationTimingFunction?: string | undefined;
        MozAppearance?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "button-bevel" | "checkbox" | "listbox" | "menulist" | "menulist-button" | "radio" | "searchfield" | "button" | "textfield" | "-moz-mac-unified-toolbar" | "-moz-win-borderless-glass" | "-moz-win-browsertabbar-toolbox" | "-moz-win-communications-toolbox" | "-moz-win-communicationstext" | "-moz-win-exclude-glass" | "-moz-win-glass" | "-moz-win-media-toolbox" | "-moz-win-mediatext" | "-moz-window-button-box" | "-moz-window-button-box-maximized" | "-moz-window-button-close" | "-moz-window-button-maximize" | "-moz-window-button-minimize" | "-moz-window-button-restore" | "-moz-window-frame-bottom" | "-moz-window-frame-left" | "-moz-window-frame-right" | "-moz-window-titlebar" | "-moz-window-titlebar-maximized" | "button-arrow-down" | "button-arrow-next" | "button-arrow-previous" | "button-arrow-up" | "button-focus" | "caret" | "checkbox-container" | "checkbox-label" | "checkmenuitem" | "dualbutton" | "groupbox" | "listitem" | "menuarrow" | "menubar" | "menucheckbox" | "menuimage" | "menuitem" | "menuitemtext" | "menulist-text" | "menulist-textfield" | "menupopup" | "menuradio" | "menuseparator" | "meterbar" | "meterchunk" | "progressbar" | "progressbar-vertical" | "progresschunk" | "progresschunk-vertical" | "radio-container" | "radio-label" | "radiomenuitem" | "range" | "range-thumb" | "resizer" | "resizerpanel" | "scale-horizontal" | "scale-vertical" | "scalethumb-horizontal" | "scalethumb-vertical" | "scalethumbend" | "scalethumbstart" | "scalethumbtick" | "scrollbarbutton-down" | "scrollbarbutton-left" | "scrollbarbutton-right" | "scrollbarbutton-up" | "scrollbarthumb-horizontal" | "scrollbarthumb-vertical" | "scrollbartrack-horizontal" | "scrollbartrack-vertical" | "separator" | "sheet" | "spinner" | "spinner-downbutton" | "spinner-textfield" | "spinner-upbutton" | "splitter" | "statusbar" | "statusbarpanel" | "tab" | "tab-scroll-arrow-back" | "tab-scroll-arrow-forward" | "tabpanel" | "tabpanels" | "textfield-multiline" | "toolbar" | "toolbarbutton" | "toolbarbutton-dropdown" | "toolbargripper" | "toolbox" | "tooltip" | "treeheader" | "treeheadercell" | "treeheadersortarrow" | "treeitem" | "treeline" | "treetwisty" | "treetwistyopen" | "treeview" | undefined;
        MozBackfaceVisibility?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | undefined;
        MozBorderEndColor?: string | undefined;
        MozBorderEndStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        MozBorderEndWidth?: string | number | undefined;
        MozBorderStartColor?: string | undefined;
        MozBorderStartStyle?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "dashed" | "dotted" | "double" | "groove" | "inset" | "outset" | "ridge" | "solid" | undefined;
        MozBoxSizing?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "border-box" | "content-box" | undefined;
        MozColumnCount?: number | "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        MozColumnFill?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "balance" | "balance-all" | undefined;
        MozColumnGap?: string | number | undefined;
        MozColumnRuleColor?: string | undefined;
        MozColumnRuleStyle?: string | undefined;
        MozColumnRuleWidth?: string | number | undefined;
        MozColumnWidth?: string | number | undefined;
        MozContextProperties?: string | undefined;
        MozFloatEdge?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "border-box" | "content-box" | "padding-box" | "margin-box" | undefined;
        MozFontFeatureSettings?: string | undefined;
        MozFontLanguageOverride?: string | undefined;
        MozForceBrokenImageIcon?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        MozHyphens?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "manual" | undefined;
        MozImageRegion?: string | undefined;
        MozMarginEnd?: string | number | undefined;
        MozMarginStart?: string | number | undefined;
        MozOrient?: "vertical" | "horizontal" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "block" | "inline" | undefined;
        MozOutlineRadiusBottomleft?: string | number | undefined;
        MozOutlineRadiusBottomright?: string | number | undefined;
        MozOutlineRadiusTopleft?: string | number | undefined;
        MozOutlineRadiusTopright?: string | number | undefined;
        MozPaddingEnd?: string | number | undefined;
        MozPaddingStart?: string | number | undefined;
        MozPerspective?: string | number | undefined;
        MozPerspectiveOrigin?: string | number | undefined;
        MozStackSizing?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "ignore" | "stretch-to-fit" | undefined;
        MozTabSize?: string | number | undefined;
        MozTextSizeAdjust?: string | undefined;
        MozTransformOrigin?: string | number | undefined;
        MozTransformStyle?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "flat" | "preserve-3d" | undefined;
        MozTransitionDelay?: string | undefined;
        MozTransitionDuration?: string | undefined;
        MozTransitionProperty?: string | undefined;
        MozTransitionTimingFunction?: string | undefined;
        MozUserFocus?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "none" | "ignore" | "select-after" | "select-all" | "select-before" | "select-menu" | "select-same" | undefined;
        MozUserModify?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "read-only" | "read-write" | "write-only" | undefined;
        MozUserSelect?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | "all" | "text" | "-moz-none" | "element" | undefined;
        MozWindowDragging?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "drag" | "no-drag" | undefined;
        msAccelerator?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "false" | "true" | undefined;
        msAlignSelf?: string | undefined;
        msBlockProgression?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "bt" | "lr" | "rl" | "tb" | undefined;
        msContentZoomChaining?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "chained" | undefined;
        msContentZoomLimitMax?: string | undefined;
        msContentZoomLimitMin?: string | undefined;
        msContentZoomSnapPoints?: string | undefined;
        msContentZoomSnapType?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "mandatory" | "proximity" | undefined;
        msContentZooming?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "zoom" | undefined;
        msFilter?: string | undefined;
        msFlexDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "column" | "column-reverse" | "row" | "row-reverse" | undefined;
        msFlexPositive?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        msFlowFrom?: string | undefined;
        msFlowInto?: string | undefined;
        msGridColumns?: string | number | undefined;
        msGridRows?: string | number | undefined;
        msHighContrastAdjust?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        msHyphenateLimitChars?: string | number | undefined;
        msHyphenateLimitLines?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "no-limit" | undefined;
        msHyphenateLimitZone?: string | number | undefined;
        msHyphens?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "manual" | undefined;
        msImeAlign?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "after" | undefined;
        msLineBreak?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
        msOrder?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        msOverflowStyle?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "-ms-autohiding-scrollbar" | "scrollbar" | undefined;
        msOverflowX?: "auto" | "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
        msOverflowY?: "auto" | "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | "scroll" | undefined;
        msScrollChaining?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "chained" | undefined;
        msScrollLimitXMax?: string | number | undefined;
        msScrollLimitXMin?: string | number | undefined;
        msScrollLimitYMax?: string | number | undefined;
        msScrollLimitYMin?: string | number | undefined;
        msScrollRails?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "railed" | undefined;
        msScrollSnapPointsX?: string | undefined;
        msScrollSnapPointsY?: string | undefined;
        msScrollSnapType?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "mandatory" | "proximity" | undefined;
        msScrollTranslation?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "vertical-to-horizontal" | undefined;
        msScrollbar3dlightColor?: string | undefined;
        msScrollbarArrowColor?: string | undefined;
        msScrollbarBaseColor?: string | undefined;
        msScrollbarDarkshadowColor?: string | undefined;
        msScrollbarFaceColor?: string | undefined;
        msScrollbarHighlightColor?: string | undefined;
        msScrollbarShadowColor?: string | undefined;
        msTextAutospace?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "ideograph-alpha" | "ideograph-numeric" | "ideograph-parenthesis" | "ideograph-space" | undefined;
        msTextCombineHorizontal?: string | undefined;
        msTextOverflow?: string | undefined;
        msTouchAction?: string | undefined;
        msTouchSelect?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "grippers" | undefined;
        msTransform?: string | undefined;
        msTransformOrigin?: string | number | undefined;
        msTransitionDelay?: string | undefined;
        msTransitionDuration?: string | undefined;
        msTransitionProperty?: string | undefined;
        msTransitionTimingFunction?: string | undefined;
        msUserSelect?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "text" | "element" | undefined;
        msWordBreak?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "break-word" | "break-all" | "keep-all" | undefined;
        msWrapFlow?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "end" | "start" | "both" | "clear" | "maximum" | undefined;
        msWrapMargin?: string | number | undefined;
        msWrapThrough?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "wrap" | undefined;
        msWritingMode?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl" | undefined;
        OObjectFit?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | "cover" | "fill" | "scale-down" | undefined;
        OObjectPosition?: string | number | undefined;
        OTabSize?: string | number | undefined;
        OTextOverflow?: string | undefined;
        OTransformOrigin?: string | number | undefined;
        WebkitAlignContent?: string | undefined;
        WebkitAlignItems?: string | undefined;
        WebkitAlignSelf?: string | undefined;
        WebkitAnimationDelay?: string | undefined;
        WebkitAnimationDirection?: string | undefined;
        WebkitAnimationDuration?: string | undefined;
        WebkitAnimationFillMode?: string | undefined;
        WebkitAnimationIterationCount?: string | number | undefined;
        WebkitAnimationName?: string | undefined;
        WebkitAnimationPlayState?: string | undefined;
        WebkitAnimationTimingFunction?: string | undefined;
        WebkitAppearance?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "button-bevel" | "checkbox" | "listbox" | "menulist" | "menulist-button" | "meter" | "progress-bar" | "push-button" | "radio" | "searchfield" | "slider-horizontal" | "square-button" | "textarea" | "button" | "textfield" | "caret" | "listitem" | "menulist-text" | "menulist-textfield" | "default-button" | "inner-spin-button" | "media-controls-background" | "media-controls-fullscreen-background" | "media-current-time-display" | "media-enter-fullscreen-button" | "media-exit-fullscreen-button" | "media-fullscreen-button" | "media-mute-button" | "media-overlay-play-button" | "media-play-button" | "media-seek-back-button" | "media-seek-forward-button" | "media-slider" | "media-sliderthumb" | "media-time-remaining-display" | "media-toggle-closed-captions-button" | "media-volume-slider" | "media-volume-slider-container" | "media-volume-sliderthumb" | "progress-bar-value" | "searchfield-cancel-button" | "searchfield-decoration" | "searchfield-results-button" | "searchfield-results-decoration" | "slider-vertical" | "sliderthumb-horizontal" | "sliderthumb-vertical" | undefined;
        WebkitBackdropFilter?: string | undefined;
        WebkitBackfaceVisibility?: "hidden" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "visible" | undefined;
        WebkitBackgroundClip?: string | undefined;
        WebkitBackgroundOrigin?: string | undefined;
        WebkitBackgroundSize?: string | number | undefined;
        WebkitBorderBeforeColor?: string | undefined;
        WebkitBorderBeforeStyle?: string | undefined;
        WebkitBorderBeforeWidth?: string | number | undefined;
        WebkitBorderBottomLeftRadius?: string | number | undefined;
        WebkitBorderBottomRightRadius?: string | number | undefined;
        WebkitBorderImageSlice?: string | number | undefined;
        WebkitBorderTopLeftRadius?: string | number | undefined;
        WebkitBorderTopRightRadius?: string | number | undefined;
        WebkitBoxDecorationBreak?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "clone" | "slice" | undefined;
        WebkitBoxReflect?: string | number | undefined;
        WebkitBoxShadow?: string | undefined;
        WebkitBoxSizing?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "border-box" | "content-box" | undefined;
        WebkitClipPath?: string | undefined;
        WebkitColorAdjust?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "economy" | "exact" | undefined;
        WebkitColumnCount?: number | "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitColumnFill?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "balance" | "balance-all" | undefined;
        WebkitColumnGap?: string | number | undefined;
        WebkitColumnRuleColor?: string | undefined;
        WebkitColumnRuleStyle?: string | undefined;
        WebkitColumnRuleWidth?: string | number | undefined;
        WebkitColumnSpan?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "all" | undefined;
        WebkitColumnWidth?: string | number | undefined;
        WebkitFilter?: string | undefined;
        WebkitFlexBasis?: string | number | undefined;
        WebkitFlexDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "column" | "column-reverse" | "row" | "row-reverse" | undefined;
        WebkitFlexGrow?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitFlexShrink?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitFlexWrap?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "nowrap" | "wrap" | "wrap-reverse" | undefined;
        WebkitFontFeatureSettings?: string | undefined;
        WebkitFontKerning?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "none" | undefined;
        WebkitFontVariantLigatures?: string | undefined;
        WebkitHyphens?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "manual" | undefined;
        WebkitJustifyContent?: string | undefined;
        WebkitLineBreak?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
        WebkitLineClamp?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | undefined;
        WebkitMarginEnd?: string | number | undefined;
        WebkitMarginStart?: string | number | undefined;
        WebkitMaskAttachment?: string | undefined;
        WebkitMaskClip?: string | undefined;
        WebkitMaskComposite?: string | undefined;
        WebkitMaskImage?: string | undefined;
        WebkitMaskOrigin?: string | undefined;
        WebkitMaskPosition?: string | number | undefined;
        WebkitMaskPositionX?: string | number | undefined;
        WebkitMaskPositionY?: string | number | undefined;
        WebkitMaskRepeat?: string | undefined;
        WebkitMaskRepeatX?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "no-repeat" | "repeat" | "round" | "space" | undefined;
        WebkitMaskRepeatY?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "no-repeat" | "repeat" | "round" | "space" | undefined;
        WebkitMaskSize?: string | number | undefined;
        WebkitMaxInlineSize?: string | number | undefined;
        WebkitOrder?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitOverflowScrolling?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "touch" | undefined;
        WebkitPaddingEnd?: string | number | undefined;
        WebkitPaddingStart?: string | number | undefined;
        WebkitPerspective?: string | number | undefined;
        WebkitPerspectiveOrigin?: string | number | undefined;
        WebkitScrollSnapType?: string | undefined;
        WebkitShapeMargin?: string | number | undefined;
        WebkitTapHighlightColor?: string | undefined;
        WebkitTextCombine?: string | undefined;
        WebkitTextDecorationColor?: string | undefined;
        WebkitTextDecorationLine?: string | undefined;
        WebkitTextDecorationSkip?: string | undefined;
        WebkitTextDecorationStyle?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "solid" | "wavy" | undefined;
        WebkitTextEmphasisColor?: string | undefined;
        WebkitTextEmphasisPosition?: string | undefined;
        WebkitTextEmphasisStyle?: string | undefined;
        WebkitTextFillColor?: string | undefined;
        WebkitTextOrientation?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "mixed" | "sideways" | "upright" | undefined;
        WebkitTextSizeAdjust?: string | undefined;
        WebkitTextStrokeColor?: string | undefined;
        WebkitTextStrokeWidth?: string | number | undefined;
        WebkitTouchCallout?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "default" | undefined;
        WebkitTransform?: string | undefined;
        WebkitTransformOrigin?: string | number | undefined;
        WebkitTransformStyle?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "flat" | "preserve-3d" | undefined;
        WebkitTransitionDelay?: string | undefined;
        WebkitTransitionDuration?: string | undefined;
        WebkitTransitionProperty?: string | undefined;
        WebkitTransitionTimingFunction?: string | undefined;
        WebkitUserModify?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "read-only" | "read-write" | "read-write-plaintext-only" | undefined;
        WebkitUserSelect?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | "all" | "text" | "-moz-none" | "element" | undefined;
        WebkitWritingMode?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "horizontal-tb" | "sideways-lr" | "sideways-rl" | "vertical-lr" | "vertical-rl" | undefined;
        MozAnimation?: string | number | undefined;
        MozBorderImage?: string | number | undefined;
        MozColumnRule?: string | number | undefined;
        MozColumns?: string | number | undefined;
        MozTransition?: string | undefined;
        msContentZoomLimit?: string | undefined;
        msContentZoomSnap?: string | undefined;
        msFlex?: string | number | undefined;
        msScrollLimit?: string | undefined;
        msScrollSnapX?: string | undefined;
        msScrollSnapY?: string | undefined;
        msTransition?: string | undefined;
        WebkitAnimation?: string | number | undefined;
        WebkitBorderBefore?: string | number | undefined;
        WebkitBorderImage?: string | number | undefined;
        WebkitBorderRadius?: string | number | undefined;
        WebkitColumnRule?: string | number | undefined;
        WebkitColumns?: string | number | undefined;
        WebkitFlex?: string | number | undefined;
        WebkitFlexFlow?: string | undefined;
        WebkitMask?: string | number | undefined;
        WebkitTextEmphasis?: string | undefined;
        WebkitTextStroke?: string | number | undefined;
        WebkitTransition?: string | undefined;
        boxAlign?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "stretch" | "center" | "end" | "start" | "baseline" | undefined;
        boxDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
        boxFlex?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        boxFlexGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        boxLines?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "multiple" | "single" | undefined;
        boxOrdinalGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        boxOrient?: "vertical" | "horizontal" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
        boxPack?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | undefined;
        clip?: string | undefined;
        fontVariantAlternates?: string | undefined;
        gridColumnGap?: string | number | undefined;
        gridGap?: string | number | undefined;
        gridRowGap?: string | number | undefined;
        imeMode?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "active" | "disabled" | "inactive" | undefined;
        offsetBlock?: string | number | undefined;
        offsetBlockEnd?: string | number | undefined;
        offsetBlockStart?: string | number | undefined;
        offsetInline?: string | number | undefined;
        offsetInlineEnd?: string | number | undefined;
        offsetInlineStart?: string | number | undefined;
        scrollSnapCoordinate?: string | number | undefined;
        scrollSnapDestination?: string | number | undefined;
        scrollSnapPointsX?: string | undefined;
        scrollSnapPointsY?: string | undefined;
        scrollSnapTypeX?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "mandatory" | "proximity" | undefined;
        scrollSnapTypeY?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "mandatory" | "proximity" | undefined;
        scrollbarTrackColor?: string | undefined;
        textCombineHorizontal?: string | undefined;
        KhtmlBoxAlign?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "stretch" | "center" | "end" | "start" | "baseline" | undefined;
        KhtmlBoxDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
        KhtmlBoxFlex?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        KhtmlBoxFlexGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        KhtmlBoxLines?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "multiple" | "single" | undefined;
        KhtmlBoxOrdinalGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        KhtmlBoxOrient?: "vertical" | "horizontal" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
        KhtmlBoxPack?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | undefined;
        KhtmlLineBreak?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "strict" | "anywhere" | "loose" | undefined;
        KhtmlOpacity?: string | number | undefined;
        KhtmlUserSelect?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "contain" | "all" | "text" | "-moz-none" | "element" | undefined;
        MozBackgroundClip?: string | undefined;
        MozBackgroundInlinePolicy?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "clone" | "slice" | undefined;
        MozBackgroundOrigin?: string | undefined;
        MozBackgroundSize?: string | number | undefined;
        MozBinding?: string | undefined;
        MozBorderBottomColors?: string | undefined;
        MozBorderLeftColors?: string | undefined;
        MozBorderRadius?: string | number | undefined;
        MozBorderRadiusBottomleft?: string | number | undefined;
        MozBorderRadiusBottomright?: string | number | undefined;
        MozBorderRadiusTopleft?: string | number | undefined;
        MozBorderRadiusTopright?: string | number | undefined;
        MozBorderRightColors?: string | undefined;
        MozBorderTopColors?: string | undefined;
        MozBoxAlign?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "stretch" | "center" | "end" | "start" | "baseline" | undefined;
        MozBoxDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
        MozBoxFlex?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        MozBoxOrdinalGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        MozBoxOrient?: "vertical" | "horizontal" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
        MozBoxPack?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | undefined;
        MozBoxShadow?: string | undefined;
        MozOpacity?: string | number | undefined;
        MozOutline?: string | number | undefined;
        MozOutlineColor?: string | undefined;
        MozOutlineRadius?: string | number | undefined;
        MozOutlineStyle?: string | undefined;
        MozOutlineWidth?: string | number | undefined;
        MozTextAlignLast?: "auto" | "right" | "left" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | undefined;
        MozTextBlink?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "blink" | undefined;
        MozTextDecorationColor?: string | undefined;
        MozTextDecorationLine?: string | undefined;
        MozTextDecorationStyle?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "dashed" | "dotted" | "double" | "solid" | "wavy" | undefined;
        MozUserInput?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "disabled" | "enabled" | undefined;
        MozWindowShadow?: "menu" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "default" | "sheet" | "tooltip" | undefined;
        msImeMode?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "active" | "disabled" | "inactive" | undefined;
        msScrollbarTrackColor?: string | undefined;
        OAnimation?: string | number | undefined;
        OAnimationDelay?: string | undefined;
        OAnimationDirection?: string | undefined;
        OAnimationDuration?: string | undefined;
        OAnimationFillMode?: string | undefined;
        OAnimationIterationCount?: string | number | undefined;
        OAnimationName?: string | undefined;
        OAnimationPlayState?: string | undefined;
        OAnimationTimingFunction?: string | undefined;
        OBackgroundSize?: string | number | undefined;
        OBorderImage?: string | number | undefined;
        OTransform?: string | undefined;
        OTransition?: string | undefined;
        OTransitionDelay?: string | undefined;
        OTransitionDuration?: string | undefined;
        OTransitionProperty?: string | undefined;
        OTransitionTimingFunction?: string | undefined;
        WebkitBoxAlign?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "stretch" | "center" | "end" | "start" | "baseline" | undefined;
        WebkitBoxDirection?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "normal" | "reverse" | undefined;
        WebkitBoxFlex?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitBoxFlexGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitBoxLines?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "multiple" | "single" | undefined;
        WebkitBoxOrdinalGroup?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        WebkitBoxOrient?: "vertical" | "horizontal" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "block-axis" | "inline-axis" | undefined;
        WebkitBoxPack?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "center" | "end" | "start" | "justify" | undefined;
        WebkitScrollSnapPointsX?: string | undefined;
        WebkitScrollSnapPointsY?: string | undefined;
        alignmentBaseline?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "baseline" | "middle" | "after-edge" | "alphabetic" | "before-edge" | "central" | "hanging" | "ideographic" | "mathematical" | "text-after-edge" | "text-before-edge" | undefined;
        baselineShift?: string | number | undefined;
        clipRule?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "evenodd" | "nonzero" | undefined;
        colorInterpolation?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "linearRGB" | "sRGB" | undefined;
        colorRendering?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "optimizeSpeed" | "optimizeQuality" | undefined;
        dominantBaseline?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "middle" | "alphabetic" | "central" | "hanging" | "ideographic" | "mathematical" | "text-after-edge" | "text-before-edge" | "no-change" | "reset-size" | "use-script" | undefined;
        fill?: string | undefined;
        fillOpacity?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        fillRule?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "evenodd" | "nonzero" | undefined;
        floodColor?: string | undefined;
        floodOpacity?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        glyphOrientationVertical?: string | number | undefined;
        lightingColor?: string | undefined;
        marker?: string | undefined;
        markerEnd?: string | undefined;
        markerMid?: string | undefined;
        markerStart?: string | undefined;
        shapeRendering?: "auto" | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "geometricPrecision" | "optimizeSpeed" | "crispEdges" | undefined;
        stopColor?: string | undefined;
        stopOpacity?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        stroke?: string | undefined;
        strokeDasharray?: string | number | undefined;
        strokeDashoffset?: string | number | undefined;
        strokeLinecap?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "round" | "butt" | "square" | undefined;
        strokeLinejoin?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "round" | "bevel" | "miter" | undefined;
        strokeMiterlimit?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        strokeOpacity?: number | "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | undefined;
        strokeWidth?: string | number | undefined;
        textAnchor?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "end" | "start" | "middle" | undefined;
        vectorEffect?: "-moz-initial" | "inherit" | "initial" | "revert" | "unset" | "none" | "non-scaling-stroke" | undefined;
    };
    onMouseEnter: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onKeyDown: (event: React.KeyboardEvent<Element>) => void;
    onBlur: (event: React.FocusEvent<HTMLElement>) => void;
};
/**
 * React Hook to manage a menu button.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and it's return value
 * is passed as `context` to this hook.
 */
export interface UseMenuButtonProps {
    onMouseEnter?: React.MouseEventHandler;
    onClick?: React.MouseEventHandler;
    onMouseLeave?: React.MouseEventHandler;
    onKeyDown?: React.KeyboardEventHandler;
    className?: string;
    /**
     * Return value from `useMenu` hook
     */
    context: UseMenuReturn;
}
export declare function useMenuButton(props: UseMenuButtonProps): {
    ref: (value: HTMLButtonElement) => void;
    className: string;
    id: string;
    "data-active": import("@chakra-ui/utils/dist/types").Booleanish;
    "aria-expanded": boolean;
    "aria-haspopup": boolean | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | "dialog" | undefined;
    "aria-controls": string;
    onClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseEnter: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseLeave: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onKeyDown: (event: React.KeyboardEvent<Element>) => void;
};
/**
 * React Hook to manage a menu item.
 *
 * The assumption here is that the `useMenu` hook is used
 * in a component higher up the tree, and it's return value
 * is passed as `context` to this hook.
 */
export interface UseMenuItemProps {
    onMouseOut?: React.MouseEventHandler;
    /**
     * Return value from `useMenu` hook
     */
    context: UseMenuReturn;
    onClick?: React.MouseEventHandler;
    isDisabled?: boolean;
    isFocusable?: boolean;
    className?: string;
}
export declare function useMenuItem(props: UseMenuItemProps): {
    className: string;
    id: string;
    role: string;
    tabIndex: number;
    ref: (value: any) => void;
    type: "button" | "reset" | "submit" | undefined;
    "aria-disabled": boolean | undefined;
    disabled: boolean | undefined;
    onClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseDown: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseUp: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onKeyUp: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyDown: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onMouseOver: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | "inherit" | "false" | "true" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | "false" | "true" | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    /**
     * Add some popper.js for dynamic positioning
     */
    slot?: string | undefined;
    spellCheck?: boolean | "false" | "true" | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: boolean | "false" | "true" | undefined;
    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
    'aria-busy'?: boolean | "false" | "true" | undefined;
    'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "none" | "copy" | "move" | "execute" | "link" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: boolean | "false" | "true" | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: boolean | "false" | "true" | undefined;
    'aria-haspopup'?: boolean | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | "dialog" | undefined;
    'aria-hidden'?: boolean | "false" | "true" | undefined;
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: boolean | "false" | "true" | undefined;
    'aria-multiline'?: boolean | "false" | "true" | undefined;
    'aria-multiselectable'?: boolean | "false" | "true" | undefined;
    'aria-orientation'?: "vertical" | "horizontal" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-readonly'?: boolean | "false" | "true" | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
    'aria-required'?: boolean | "false" | "true" | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: boolean | "false" | "true" | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined; /**
     * Otherwise, close the menu provided `closeOnBlur` is set to `true`
     */
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<any>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onChange?: ((event: React.FormEvent<any>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onReset?: ((event: React.FormEvent<any>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined; /**
     * Return value from `useMenu` hook
     */
    onEnded?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDrag?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnd?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStart?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<any>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<any>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<any>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<any>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<any>) => void) | undefined;
    onAnimationStart?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<any>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<any>) => void) | undefined;
    key?: string | number | undefined;
} | {
    className: string;
    id: string;
    role: string;
    tabIndex: number;
    ref: (value: any) => void;
    "data-active": import("@chakra-ui/utils/dist/types").Booleanish;
    "aria-disabled": boolean;
    onClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseDown: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseUp: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onKeyUp: (event: React.KeyboardEvent<Element>) => void;
    onKeyDown: (event: React.KeyboardEvent<Element>) => void;
    onMouseOver: (event: React.MouseEvent<Element, MouseEvent>) => void;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | "inherit" | "false" | "true" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | "false" | "true" | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | "false" | "true" | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: boolean | "false" | "true" | undefined;
    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
    'aria-busy'?: boolean | "false" | "true" | undefined;
    'aria-checked'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "none" | "copy" | "move" | "execute" | "link" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: boolean | "false" | "true" | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: boolean | "false" | "true" | undefined;
    'aria-haspopup'?: boolean | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | "dialog" | undefined;
    'aria-hidden'?: boolean | "false" | "true" | undefined;
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: boolean | "false" | "true" | undefined;
    'aria-multiline'?: boolean | "false" | "true" | undefined;
    'aria-multiselectable'?: boolean | "false" | "true" | undefined;
    'aria-orientation'?: "vertical" | "horizontal" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-readonly'?: boolean | "false" | "true" | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
    'aria-required'?: boolean | "false" | "true" | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: boolean | "false" | "true" | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<any>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onChange?: ((event: React.FormEvent<any>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onReset?: ((event: React.FormEvent<any>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDrag?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnd?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStart?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<any>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<any>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<any>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<any>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<any>) => void) | undefined;
    onAnimationStart?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<any>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<any>) => void) | undefined;
    key?: string | number | undefined;
};
export declare type UseMenuOptionProps = UseMenuItemProps & {
    value?: string;
    isChecked?: string;
    type?: "radio" | "checkbox";
};
export declare function useMenuOption(props: UseMenuOptionProps): {
    className: string;
    role: string;
    "aria-checked": boolean | "mixed" | "false" | "true" | undefined;
    id: string;
    tabIndex: number;
    ref: (value: any) => void;
    type: "button" | "reset" | "submit" | undefined;
    "aria-disabled": boolean | undefined;
    disabled: boolean | undefined;
    onClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseDown: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseUp: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onKeyUp: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyDown: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onMouseOver: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | "inherit" | "false" | "true" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | "false" | "true" | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    /**
     * Add some popper.js for dynamic positioning
     */
    slot?: string | undefined;
    spellCheck?: boolean | "false" | "true" | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: boolean | "false" | "true" | undefined;
    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
    'aria-busy'?: boolean | "false" | "true" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "none" | "copy" | "move" | "execute" | "link" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: boolean | "false" | "true" | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: boolean | "false" | "true" | undefined;
    'aria-haspopup'?: boolean | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | "dialog" | undefined;
    'aria-hidden'?: boolean | "false" | "true" | undefined;
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: boolean | "false" | "true" | undefined;
    'aria-multiline'?: boolean | "false" | "true" | undefined;
    'aria-multiselectable'?: boolean | "false" | "true" | undefined;
    'aria-orientation'?: "vertical" | "horizontal" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-readonly'?: boolean | "false" | "true" | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
    'aria-required'?: boolean | "false" | "true" | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: boolean | "false" | "true" | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined; /**
     * Otherwise, close the menu provided `closeOnBlur` is set to `true`
     */
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<any>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onChange?: ((event: React.FormEvent<any>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onReset?: ((event: React.FormEvent<any>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined; /**
     * Return value from `useMenu` hook
     */
    onEnded?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDrag?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnd?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStart?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<any>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<any>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<any>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<any>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<any>) => void) | undefined;
    onAnimationStart?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<any>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<any>) => void) | undefined;
    key?: string | number | undefined;
    value?: string | undefined;
} | {
    className: string;
    role: string;
    "aria-checked": boolean | "mixed" | "false" | "true" | undefined;
    id: string;
    tabIndex: number;
    ref: (value: any) => void;
    "data-active": import("@chakra-ui/utils/dist/types").Booleanish;
    "aria-disabled": boolean;
    onClick: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseDown: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onMouseUp: (event: React.MouseEvent<Element, MouseEvent>) => void;
    onKeyUp: (event: React.KeyboardEvent<Element>) => void;
    onKeyDown: (event: React.KeyboardEvent<Element>) => void;
    onMouseOver: (event: React.MouseEvent<Element, MouseEvent>) => void;
    defaultChecked?: boolean | undefined;
    defaultValue?: string | number | string[] | undefined;
    suppressContentEditableWarning?: boolean | undefined;
    suppressHydrationWarning?: boolean | undefined;
    accessKey?: string | undefined;
    contentEditable?: boolean | "inherit" | "false" | "true" | undefined;
    contextMenu?: string | undefined;
    dir?: string | undefined;
    draggable?: boolean | "false" | "true" | undefined;
    hidden?: boolean | undefined;
    lang?: string | undefined;
    placeholder?: string | undefined;
    slot?: string | undefined;
    spellCheck?: boolean | "false" | "true" | undefined;
    style?: React.CSSProperties | undefined;
    title?: string | undefined;
    translate?: "yes" | "no" | undefined;
    radioGroup?: string | undefined;
    about?: string | undefined;
    datatype?: string | undefined;
    inlist?: any;
    prefix?: string | undefined;
    property?: string | undefined;
    resource?: string | undefined;
    typeof?: string | undefined;
    vocab?: string | undefined;
    autoCapitalize?: string | undefined;
    autoCorrect?: string | undefined;
    autoSave?: string | undefined;
    color?: string | undefined;
    itemProp?: string | undefined;
    itemScope?: boolean | undefined;
    itemType?: string | undefined;
    itemID?: string | undefined;
    itemRef?: string | undefined;
    results?: number | undefined;
    security?: string | undefined;
    unselectable?: "on" | "off" | undefined;
    inputMode?: "none" | "text" | "tel" | "url" | "email" | "numeric" | "decimal" | "search" | undefined;
    is?: string | undefined;
    'aria-activedescendant'?: string | undefined;
    'aria-atomic'?: boolean | "false" | "true" | undefined;
    'aria-autocomplete'?: "both" | "none" | "inline" | "list" | undefined;
    'aria-busy'?: boolean | "false" | "true" | undefined;
    'aria-colcount'?: number | undefined;
    'aria-colindex'?: number | undefined;
    'aria-colspan'?: number | undefined;
    'aria-controls'?: string | undefined;
    'aria-current'?: boolean | "page" | "false" | "true" | "step" | "location" | "date" | "time" | undefined;
    'aria-describedby'?: string | undefined;
    'aria-details'?: string | undefined;
    'aria-dropeffect'?: "none" | "copy" | "move" | "execute" | "link" | "popup" | undefined;
    'aria-errormessage'?: string | undefined;
    'aria-expanded'?: boolean | "false" | "true" | undefined;
    'aria-flowto'?: string | undefined;
    'aria-grabbed'?: boolean | "false" | "true" | undefined;
    'aria-haspopup'?: boolean | "menu" | "listbox" | "grid" | "false" | "true" | "tree" | "dialog" | undefined;
    'aria-hidden'?: boolean | "false" | "true" | undefined;
    'aria-invalid'?: boolean | "false" | "true" | "grammar" | "spelling" | undefined;
    'aria-keyshortcuts'?: string | undefined;
    'aria-label'?: string | undefined;
    'aria-labelledby'?: string | undefined;
    'aria-level'?: number | undefined;
    'aria-live'?: "off" | "assertive" | "polite" | undefined;
    'aria-modal'?: boolean | "false" | "true" | undefined;
    'aria-multiline'?: boolean | "false" | "true" | undefined;
    'aria-multiselectable'?: boolean | "false" | "true" | undefined;
    'aria-orientation'?: "vertical" | "horizontal" | undefined;
    'aria-owns'?: string | undefined;
    'aria-placeholder'?: string | undefined;
    'aria-posinset'?: number | undefined;
    'aria-pressed'?: boolean | "mixed" | "false" | "true" | undefined;
    'aria-readonly'?: boolean | "false" | "true" | undefined;
    'aria-relevant'?: "all" | "text" | "additions" | "additions text" | "removals" | undefined;
    'aria-required'?: boolean | "false" | "true" | undefined;
    'aria-roledescription'?: string | undefined;
    'aria-rowcount'?: number | undefined;
    'aria-rowindex'?: number | undefined;
    'aria-rowspan'?: number | undefined;
    'aria-selected'?: boolean | "false" | "true" | undefined;
    'aria-setsize'?: number | undefined;
    'aria-sort'?: "none" | "ascending" | "descending" | "other" | undefined;
    'aria-valuemax'?: number | undefined;
    'aria-valuemin'?: number | undefined;
    'aria-valuenow'?: number | undefined;
    'aria-valuetext'?: string | undefined;
    children?: React.ReactNode;
    dangerouslySetInnerHTML?: {
        __html: string;
    } | undefined;
    onCopy?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCopyCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCut?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCutCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPaste?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onPasteCapture?: ((event: React.ClipboardEvent<any>) => void) | undefined;
    onCompositionEnd?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionEndCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStart?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionStartCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdate?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onCompositionUpdateCapture?: ((event: React.CompositionEvent<any>) => void) | undefined;
    onFocus?: ((event: React.FocusEvent<any>) => void) | undefined;
    onFocusCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlur?: ((event: React.FocusEvent<any>) => void) | undefined;
    onBlurCapture?: ((event: React.FocusEvent<any>) => void) | undefined;
    onChange?: ((event: React.FormEvent<any>) => void) | undefined;
    onChangeCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onBeforeInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInput?: ((event: React.FormEvent<any>) => void) | undefined;
    onInputCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onReset?: ((event: React.FormEvent<any>) => void) | undefined;
    onResetCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmit?: ((event: React.FormEvent<any>) => void) | undefined;
    onSubmitCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalid?: ((event: React.FormEvent<any>) => void) | undefined;
    onInvalidCapture?: ((event: React.FormEvent<any>) => void) | undefined;
    onLoad?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onError?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onErrorCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onKeyDownCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPress?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyPressCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onKeyUpCapture?: ((event: React.KeyboardEvent<any>) => void) | undefined;
    onAbort?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAbortCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThrough?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onCanPlayThroughCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onDurationChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptied?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEmptiedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncrypted?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEncryptedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEnded?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onEndedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedData?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedDataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadata?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadedMetadataCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStart?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onLoadStartCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPause?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPauseCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlay?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlaying?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onPlayingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgress?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onProgressCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onRateChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeked?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekedCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeeking?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSeekingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalled?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onStalledCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspend?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSuspendCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdate?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTimeUpdateCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChange?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onVolumeChangeCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaiting?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onWaitingCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onAuxClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onAuxClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenu?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onContextMenuCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClick?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDoubleClickCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onDrag?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnd?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEndCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnter?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragEnterCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExit?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragExitCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeave?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragLeaveCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOver?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragOverCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStart?: ((event: React.DragEvent<any>) => void) | undefined;
    onDragStartCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onDrop?: ((event: React.DragEvent<any>) => void) | undefined;
    onDropCapture?: ((event: React.DragEvent<any>) => void) | undefined;
    onMouseDownCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseEnter?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseLeave?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMove?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseMoveCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOut?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOutCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseOverCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onMouseUpCapture?: ((event: React.MouseEvent<any, MouseEvent>) => void) | undefined;
    onSelect?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onSelectCapture?: ((event: React.SyntheticEvent<any, Event>) => void) | undefined;
    onTouchCancel?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchCancelCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEnd?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchEndCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMove?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchMoveCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStart?: ((event: React.TouchEvent<any>) => void) | undefined;
    onTouchStartCapture?: ((event: React.TouchEvent<any>) => void) | undefined;
    onPointerDown?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerDownCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMove?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerMoveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUp?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerUpCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancel?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerCancelCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnter?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerEnterCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeave?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerLeaveCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOver?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOverCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOut?: ((event: React.PointerEvent<any>) => void) | undefined;
    onPointerOutCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onGotPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onLostPointerCaptureCapture?: ((event: React.PointerEvent<any>) => void) | undefined;
    onScroll?: ((event: React.UIEvent<any>) => void) | undefined;
    onScrollCapture?: ((event: React.UIEvent<any>) => void) | undefined;
    onWheel?: ((event: React.WheelEvent<any>) => void) | undefined;
    onWheelCapture?: ((event: React.WheelEvent<any>) => void) | undefined;
    onAnimationStart?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationStartCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEnd?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationEndCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIteration?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onAnimationIterationCapture?: ((event: React.AnimationEvent<any>) => void) | undefined;
    onTransitionEnd?: ((event: React.TransitionEvent<any>) => void) | undefined;
    onTransitionEndCapture?: ((event: React.TransitionEvent<any>) => void) | undefined;
    key?: string | number | undefined;
    value?: string | undefined;
};
export interface UseMenuOptionGroupProps {
    value?: string | string[];
    defaultValue?: string | string[];
    type?: "radio" | "checkbox";
    onChange?: (value: string | string[]) => void;
    children?: React.ReactNode;
    className?: string;
}
export declare function useMenuOptionGroup(props: UseMenuOptionGroupProps): {
    className: string;
    children: React.ReactElement<any, string | ((props: any) => React.ReactElement<any, string | any | (new (props: any) => React.Component<any, any, any>)> | null) | (new (props: any) => React.Component<any, any, any>)>[];
};
//# sourceMappingURL=Menu.hook.d.ts.map